name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  NODE_VERSION: '24.x'

jobs:
  build-mac:
    name: macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Import macOS signing cert
        run: |
          echo "${{ secrets.MAC_CERTIFICATE }}" | base64 --decode > mac_cert.p12
          security create-keychain -p "" build.keychain
          security import mac_cert.p12 \
            -k build.keychain \
            -P "${{ secrets.MAC_CERTIFICATE_PASSWORD }}" \
            -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain

      - name: Build & notarize macOS (ARM64)
        env:
          CSC_LINK: mac_cert.p12
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: npm run dist:mac

      - name: Build & notarize macOS (Intel x64)
        env:
          CSC_LINK: mac_cert.p12
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: npm run dist:mac:intel

      - name: Rename macOS DMGs
        run: |
          VERSION=${{ github.ref_name }}
          # Intel DMG (no "-arm64" in its name)
          INTEL_DMG=$(ls dist/*.dmg | grep -v arm64 | head -1)
          mv "$INTEL_DMG" "dist/Wing-to-LiveTrax-${VERSION}-mac-intel.dmg"
          # ARM64 DMG
          ARM_DMG=$(ls dist/*-arm64.dmg | head -1)
          mv "$ARM_DMG" "dist/Wing-to-LiveTrax-${VERSION}-mac-arm.dmg"

      - name: Copy macOS DMGs to artifacts
        run: |
          mkdir -p artifacts/macOS
          cp dist/Wing-to-LiveTrax-${{ github.ref_name }}-mac-intel.dmg artifacts/macOS/
          cp dist/Wing-to-LiveTrax-${{ github.ref_name }}-mac-arm.dmg   artifacts/macOS/

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macOS
          path: artifacts/macOS/*.dmg
          if-no-files-found: error

  build-windows:
    name: Windows
    runs-on: windows-latest
    needs: build-mac
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\AppData\Roaming\npm
          key: windows-npm-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build Windows (unsigned)
        run: npm run dist:win
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows
          path: |
            dist/*.exe
            dist/*.zip
          if-no-files-found: error

  build-linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: build-mac
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: linux-npm-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build Linux (unsigned)
        run: npm run dist:linux
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Linux
          path: |
            dist/*.AppImage
            dist/*.deb
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-mac
      - build-windows
      - build-linux
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Debug directory structure
        run: ls -R artifacts

      - id: create_release
        name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:     ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body:         Automated release for ${{ github.ref_name }}
          draft:        false
          prerelease:   false

      - name: Upload macOS ARM DMG
        run: |
          gh release upload \
            ${{ github.ref_name }} \
            artifacts/macOS/Wing-to-LiveTrax-${{ github.ref_name }}-mac-arm.dmg \
            --clobber --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Intel DMG
        run: |
          gh release upload \
            ${{ github.ref_name }} \
            artifacts/macOS/Wing-to-LiveTrax-${{ github.ref_name }}-mac-intel.dmg \
            --clobber --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows EXE
        run: |
          gh release upload \
            ${{ github.ref_name }} \
            dist/*.exe \
            --clobber --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows ZIP
        run: |
          gh release upload \
            ${{ github.ref_name }} \
            dist/*.zip \
            --clobber --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux AppImage
        run: |
          gh release upload \
            ${{ github.ref_name }} \
            dist/*.AppImage \
            --clobber --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux DEB
        run: |
          gh release upload \
            ${{ github.ref_name }} \
            dist/*.deb \
            --clobber --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
