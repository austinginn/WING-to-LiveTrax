name: Build & Publish Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: npm

      - name: Import Apple Signing Certificate
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          P12_BASE64:     ${{ secrets.APPLE_CERT_P12 }}
          P12_PASSWORD:   ${{ secrets.APPLE_CERT_PASSWORD }}
        run: |
          security create-keychain -p "" build.keychain
          security import <(printf '%s' "$P12_BASE64" | base64 --decode) \
            -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

      - name: Install dependencies & Build Frontend
        run: |
          npm ci
          npm run build:frontend

      - name: Package App
        shell: bash
        env:
          GH_TOKEN:            ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK:            ${{ secrets.APPLE_CERT_P12 }}
          CSC_KEY_PASSWORD:    ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_ID:            ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD:   ${{ secrets.APPLE_ID_PASS }}
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "==> Building for macOS Intel..."
            npm run build:macIntel
            echo "==> Building for macOS ARM..."
            npm run build:macArm
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "==> Building for Windows..."
            npm run build:win
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "==> Building for Linux..."
            npm run build:linux
          else
            echo "‚ùå Unsupported OS: ${{ matrix.os }}"
            exit 1
          fi

      - name: Create / Upload GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
