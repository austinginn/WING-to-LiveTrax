# .github/workflows/release.yml
name: Build, Sign, and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  mac-release:
    runs-on: macos-latest
    timeout-minutes: 45
    permissions:
      contents: write

    steps:
      # 1) Checkout your repo with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Setup Node.js and cache node_modules
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Install dependencies
        run: npm ci

      # 3) Import your signing cert into its own keychain
      - name: Import code-signing certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MAC_CERTIFICATE }}
          p12-password: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          keychain: build.keychain
          keychain-password: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}

      # 4) Build, sign, notarize & package (using your package.json afterSign)
      - name: Build & Notarize macOS
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          CSC_NAME: 'Developer ID Application: Austin Ginn (P76H6523Q4)'
        run: |
          # you can target arm64, intel, or universal; here we do arm64
          npx electron-builder --mac --arm64 --publish=never

      # 5) Verify signing & notarization
      - name: Verify code-signing & notarization
        run: |
          codesign -dv --verbose=4 "dist/mac/Wing to LiveTrax.app"
          spctl -a -vv -t install "dist/mac/Wing to LiveTrax.app"
          xcrun stapler validate "dist/mac/Wing to LiveTrax.app"

      # 6) Upload the DMG so you can grab it from Actions
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: Wing-to-LiveTrax-macOS
          path: dist/*.dmg

      # 7) Create GitHub Release and attach the DMG
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: dist/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
