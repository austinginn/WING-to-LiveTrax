name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  NODE_VERSION: '24.x'

jobs:
  build-mac:
    name: macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Import macOS signing cert
        run: |
          echo "${{ secrets.MAC_CERTIFICATE }}" | base64 --decode > mac_cert.p12
          security create-keychain -p "" build.keychain
          security import mac_cert.p12 \
            -k build.keychain \
            -P "${{ secrets.MAC_CERTIFICATE_PASSWORD }}" \
            -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain
      - name: Build & notarize macOS
        env:
          CSC_LINK: mac_cert.p12
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: npm run dist:mac
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macOS
          path: |
            dist/*.dmg
            dist/*.zip
          if-no-files-found: error

  build-windows:
    name: Windows
    runs-on: windows-latest
    needs: build-mac
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\AppData\Roaming\npm
          key: windows-npm-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build Windows (unsigned)
        run: npm run dist:win
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows
          path: |
            dist/*.exe
            dist/*.zip
          if-no-files-found: error

  build-linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: build-mac
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: linux-npm-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build Linux (unsigned)
        run: npm run dist:linux
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Linux
          path: |
            dist/*.AppImage
            dist/*.deb
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-mac
      - build-windows
      - build-linux
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Debug directory structure
        run: |
          echo "Artifacts directory contents:"
          ls -R artifacts

      - id: create_release
        name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: Automated release for ${{ github.ref_name }}
          draft: false
          prerelease: false

      # macOS Assets
      - name: Find macOS DMG
        id: find_mac_dmg
        run: |
          DMG_PATH=$(ls artifacts/macOS/*.dmg)
          echo "DMG_PATH=${DMG_PATH}" >> $GITHUB_OUTPUT
          echo "Found DMG: ${DMG_PATH}"

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_mac_dmg.outputs.DMG_PATH }}
          asset_name: Wing-to-LiveTrax-${{ github.ref_name }}-mac.dmg
          asset_content_type: application/octet-stream

      - name: Find macOS ZIP
        id: find_mac_zip
        run: |
          ZIP_PATH=$(ls artifacts/macOS/*.zip)
          echo "ZIP_PATH=${ZIP_PATH}" >> $GITHUB_OUTPUT
          echo "Found ZIP: ${ZIP_PATH}"

      - name: Upload macOS ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_mac_zip.outputs.ZIP_PATH }}
          asset_name: Wing-to-LiveTrax-${{ github.ref_name }}-mac.zip
          asset_content_type: application/zip

      # Windows Assets
      - name: Find Windows EXE
        id: find_win_exe
        run: |
          EXE_PATH=$(ls artifacts/Windows/*.exe)
          echo "EXE_PATH=${EXE_PATH}" >> $GITHUB_OUTPUT
          echo "Found EXE: ${EXE_PATH}"

      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_win_exe.outputs.EXE_PATH }}
          asset_name: Wing-to-LiveTrax-${{ github.ref_name }}-win.exe
          asset_content_type: application/octet-stream

      - name: Find Windows ZIP
        id: find_win_zip
        run: |
          ZIP_PATH=$(ls artifacts/Windows/*.zip)
          echo "ZIP_PATH=${ZIP_PATH}" >> $GITHUB_OUTPUT
          echo "Found ZIP: ${ZIP_PATH}"

      - name: Upload Windows ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_win_zip.outputs.ZIP_PATH }}
          asset_name: Wing-to-LiveTrax-${{ github.ref_name }}-win.zip
          asset_content_type: application/zip

      # Linux Assets
      - name: Find Linux AppImage
        id: find_linux_appimage
        run: |
          APPIMAGE_PATH=$(ls artifacts/Linux/*.AppImage)
          echo "APPIMAGE_PATH=${APPIMAGE_PATH}" >> $GITHUB_OUTPUT
          echo "Found AppImage: ${APPIMAGE_PATH}"

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_linux_appimage.outputs.APPIMAGE_PATH }}
          asset_name: Wing-to-LiveTrax-${{ github.ref_name }}-linux.AppImage
          asset_content_type: application/octet-stream

      - name: Find Linux DEB
        id: find_linux_deb
        run: |
          DEB_PATH=$(ls artifacts/Linux/*.deb)
          echo "DEB_PATH=${DEB_PATH}" >> $GITHUB_OUTPUT
          echo "Found DEB: ${DEB_PATH}"

      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_linux_deb.outputs.DEB_PATH }}
          asset_name: Wing-to-LiveTrax-${{ github.ref_name }}-linux.deb
          asset_content_type: application/vnd.debian.binary-package